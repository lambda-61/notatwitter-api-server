#+property: header-args:elixir :dir "."
#+property: header-args:diff :results silent :dir "."
#+BEGIN_SRC emacs-lisp
(defun org-babel-execute:diff (body params)
  (let* ((tmp (org-babel-temp-file "patch-"))
         (cmd (concat "git apply " tmp))
         (file-a (assoc-default :file-a params))
         (file-b (assoc-default :file-b params)))
    (with-temp-file tmp
      (insert (concat
        "--- " file-a "\n"
        "+++ " file-b "\n"
        body)))
    (with-temp-buffer
      (async-shell-command cmd (current-buffer)))))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(defun ob-elixir-ensure-session (session params)
  (let ((name (format "*elixir-%s*" session)))
    (unless (and (get-process name)
                 (process-live-p (get-process name)))
      (with-current-buffer (get-buffer-create name)
        (setq-local process-environment (cons "TERM=vt100" process-environment))
        (apply #'start-process name name "iex"
               (append (when (assoc :script params)
                         (list "-S" (assoc-default :script params)))
                       (when (assoc :sname params)
                         (list "--sname" (assoc-default :sname params)))
                       (when (assoc :name params)
                         (list "--name" (assoc-default :name params)))
                       (when (assoc :cookie params)
                         (list "--cookie" (assoc-default :cookie params)))
                       (when (assoc :remsh params)
                         (list "--remsh" (assoc-default :remsh params))))))
      (set-process-filter (get-process name) 'ob-elixir-process-filter)
      (ob-elixir-eval-in-repl session "IEx.configure(colors: [enabled: false])"))))
#+END_SRC
* –ü–ª–∞–Ω
** –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ
*** –ú–æ—Ç–∏–≤–∞—Ü–∏—è, –∑–∞—á–µ–º –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–ª–∏–∫—Å–∏—Ä
**** –§–ü
**** –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å
**** —Ä–∞–±–æ—Ç–∞ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å—é
**** –±–æ–ª—å—à–∞—è –º–æ–¥—É–ª—å–Ω–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
*** –í–≤–æ–¥–Ω–∞—è –≤ —ç–ª–∏–∫—Å–∏—Ä
**** –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
*** –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ñ–µ–Ω–∏–∫—Å–∞
**** —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
**** –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ—Å –¥—Ä—É–≥–∏–º–∏ –ª–∏–±–∞–º–∏
**** –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏?
** Coding

   –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–ª–∞–µ–≤

*** –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º

–î–ª—è –Ω–∞—á–∞–ª–∞ –º—ã –æ–ø–∏—à–µ–º —Ä–µ–ø–ª–∞–∏:

#+BEGIN_SRC diff :file-a "a/lib/notatwitter/user/post/reply.ex" :file-b "b/lib/notatwitter/user/post/reply.ex"
@@ -0,0 +1,3 @@
+defmodule Notatwitter.User.Post.Reply do
+  @moduledoc false
+end

#+END_SRC

–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ö–µ–º—ã –Ω–∞–º –Ω—É–∂–µ–Ω –º–æ–¥—É–ª—å Ecto.Schema

#+BEGIN_SRC diff :file-a "a/lib/notatwitter/user/post/reply.ex" :file-b "b/lib/notatwitter/user/post/reply.ex"
@@ -1,3 +1,6 @@
 defmodule Notatwitter.User.Post.Reply do
   @moduledoc false
+
+  use Ecto.Schema
+
 end

#+END_SRC

–¢–∞–∫ –º—ã —É–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è —Ç–∞–±–ª–∏—Ü—ã, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –Ω–∞—à–∞ —Å—Ö–µ–º–∞.

#+BEGIN_SRC diff :file-a "a/lib/notatwitter/user/post/reply.ex" :file-b "b/lib/notatwitter/user/post/reply.ex"
@@ -3,4 +3,6 @@ defmodule Notatwitter.User.Post.Reply do
 
   use Ecto.Schema
 
+  schema "user_post_replies" do
+  end
 end

#+END_SRC

–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ–π –≤ –Ω–∞—à–µ–π —Å—Ö–µ–º–µ.

#+BEGIN_SRC diff :file-a "a/lib/notatwitter/user/post/reply.ex" :file-b "b/lib/notatwitter/user/post/reply.ex"
@@ -4,5 +4,11 @@ defmodule Notatwitter.User.Post.Reply do
   use Ecto.Schema
 
   schema "user_post_replies" do
+    belongs_to :user, User
+    belongs_to :post, Post
+
+    field :text, :string
+
+    timestamps()
   end
 end

#+END_SRC

–¢–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω—ã –∞–ª—å—è—Å—ã

- [ ] –ó–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª–Ω–æ–µ –∏–º—è –≤ belongs_to –±–µ–∑ –∞–ª—å—è—Å–æ–≤ —Å–Ω–∞—á–∞–ª–∞

#+BEGIN_SRC diff :file-a "a/lib/notatwitter/user/post/reply.ex" :file-b "b/lib/notatwitter/user/post/reply.ex"
@@ -3,6 +3,9 @@ defmodule Notatwitter.User.Post.Reply do
 
   use Ecto.Schema
 
+  alias Notatwitter.User
+  alias Notatwitter.User.Post
+
   schema "user_post_replies" do
     belongs_to :user, User
     belongs_to :post, Post

#+END_SRC

–ú—ã –º–æ–∂–µ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤ —Å—Ö–µ–º–µ —Ç–µ–ø–µ—Ä—å:

#+BEGIN_SRC elixir :script mix :session new-session-1
alias Notatwitter.User.Post.Reply
%Reply{}
#+END_SRC

#+RESULTS:
#+begin_example
%Notatwitter.User.Post.Reply{
  __meta__: #Ecto.Schema.Metadata<:built, "user_post_replies">,
  id: nil,
  inserted_at: nil,
  post: #Ecto.Association.NotLoaded<association :post is not loaded>,
  post_id: nil,
  text: nil,
  updated_at: nil,
  user: #Ecto.Association.NotLoaded<association :user is not loaded>,
  user_id: nil
}
#+end_example

#+BEGIN_SRC elixir :script mix :session new-session-1
Reply.__info__(:functions)
#+END_SRC

#+RESULTS:
: [__changeset__: 0, __schema__: 1, __schema__: 2, __struct__: 0, __struct__: 1]

–ù–∞ —ç—Ç–æ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ö–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏ –º—ã –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–µ—Ä–∞—Ü–∏—è–º –Ω–∞–¥ –Ω–µ–π.

*** –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ö–µ–º–∞–º–∏

–°–æ–∑–¥–∞—ë–º –º–æ–¥—É–ª—å.

#+BEGIN_SRC diff :file-a "a/lib/notatwitter/user/post/reply/manager.ex" :file-b "b/lib/notatwitter/user/post/reply/manager.ex"
@@ -0,0 +1,3 @@
+defmodule Notatwitter.User.Post.Reply.Manager do
+  @moduledoc false
+end

#+END_SRC

–û–ø—Ä–µ–¥–µ–ª–∏–º, –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –Ω–∞–¥ —Ä–µ–ø–ª–∞–µ–º —É –Ω–∞—Å –±—É–¥—É—Ç.

#+BEGIN_SRC diff :file-a "a/lib/notatwitter/user/post/reply/manager.ex" :file-b "b/lib/notatwitter/user/post/reply/manager.ex"
@@ -1,3 +1,12 @@
 defmodule Notatwitter.User.Post.Reply.Manager do
   @moduledoc false
+
+  def list(post_id) do
+  end
+
+  def create(user_id, post_id, attrs) do
+  end
+
+  def update(reply, attrs) do
+  end
 end

#+END_SRC

–ó–¥–µ—Å—å –Ω–∞–º –ø–æ–º–æ–∂–µ—Ç –æ–¥–∏–Ω –≤–∞–∂–Ω—ã–π –∏–Ω—Å—Ç—É–º–µ–Ω—Ç –∏–∑ Elixir, –∫–æ—Ç–æ—Ä—ã–π –µ—Å—Ç—å –≤–æ
–º–Ω–æ–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —è–∑—ã–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, -- –ø–∞–π–ø—ã.

#+BEGIN_SRC elixir
1 |> Kernel.+(2) |> to_string
#+END_SRC

#+RESULTS:
: "3"

–°–¥–µ–ª–∞–µ–º —Å–ø–∏—Å–æ–∫ -- –∑–¥–µ—Å—å –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è Ecto.Query

#+BEGIN_SRC diff :file-a "a/lib/notatwitter/user/post/reply/manager.ex" :file-b "b/lib/notatwitter/user/post/reply/manager.ex"
@@ -1,7 +1,16 @@
 defmodule Notatwitter.User.Post.Reply.Manager do
   @moduledoc false
 
+  import Ecto.Query
+
+  alias Notatwitter.Repo
+  alias Notatwitter.User.Post.Reply
+
   def list(post_id) do
+    Reply
+    |> where([r], r.post_id == ^post_id)
+    |> preload([:user])
+    |> Repo.all()
   end
 
   def create(user_id, post_id, attrs) do

#+END_SRC

–î–æ–±–∞–≤–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

#+BEGIN_SRC diff :file-a "a/lib/notatwitter/user/post/reply/manager.ex" :file-b "b/lib/notatwitter/user/post/reply/manager.ex"
@@ -3,6 +3,7 @@ defmodule Notatwitter.User.Post.Reply.Manager do
 
   import Ecto.Query
 
+  alias Ecto.Changeset
   alias Notatwitter.Repo
   alias Notatwitter.User.Post.Reply
 
@@ -14,8 +15,22 @@ defmodule Notatwitter.User.Post.Reply.Manager do
   end
 
   def create(user_id, post_id, attrs) do
+    attrs = Map.merge(attrs, %{"user_id" => user_id, "post_id" => post_id})
+
+    %Reply{}
+    |> Changeset.cast(attrs, [:text, :user_id, :post_id])
+    |> Changeset.foreign_key_constraint(:user_id)
+    |> Changeset.foreign_key_constraint(:post_id)
+    |> Changeset.validate_required([:text, :user_id, :post_id])
+    |> Changeset.validate_length(:text, max: 140, count: :bytes)
+    |> Repo.insert()
   end
 
   def update(reply, attrs) do
+    reply
+    |> Changeset.cast(attrs, [:text])
+    |> Changeset.validate_length(:text, max: 140, count: :bytes)
+    |> Changeset.validate_required([:text, :user_id, :post_id])
+    |> Repo.update()
   end
 end

#+END_SRC

–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞—à–µ–≥–æ –º–æ–¥—É–ª—è

#+BEGIN_SRC elixir :script mix :session new-session-1
alias Notatwitter.Users
user = Users.list_users() |> hd
#+END_SRC

#+RESULTS:
#+begin_example
[36m[debug] QUERY OK source="users" db=2.9ms queue=0.1ms
SELECT u0."id", u0."username", u0."avatar", u0."inserted_at", u0."updated_at" FROM "users" AS u0 []
[0m %Notatwitter.User{
  __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
  avatar: nil,
  followers: #Ecto.Association.NotLoaded<association :followers is not loaded>,
  follows: #Ecto.Association.NotLoaded<association :follows is not loaded>,
  id: 1,
  inserted_at: ~N[2019-11-10 14:53:17],
  posts: #Ecto.Association.NotLoaded<association :posts is not loaded>,
  updated_at: ~N[2019-11-10 14:53:17],
  username: "test"
}
#+end_example

#+BEGIN_SRC elixir :script mix :session new-session-1
{:ok, post} = Users.create_post(user.id, %{"text" => "post text"})
#+END_SRC

#+RESULTS:
#+begin_example
[32m[debug] QUERY OK db=12.2ms queue=2.7ms
INSERT INTO "user_posts" ("text","user_id","inserted_at","updated_at") VALUES ($1,$2,$3,$4) RETURNING "id" ["post text", 1, ~N[2020-02-24 16:30:54], ~N[2020-02-24 16:30:54]]
[0m [36m[debug] QUERY OK source="users" db=4.5ms queue=0.1ms
SELECT u0."id", u0."username", u0."avatar", u0."inserted_at", u0."updated_at", u0."id" FROM "users" AS u0 WHERE (u0."id" = $1) [1]
[0m {:ok,
 %Notatwitter.User.Post{
   __meta__: #Ecto.Schema.Metadata<:loaded, "user_posts">,
   id: 5,
   inserted_at: ~N[2020-02-24 16:30:54],
   text: "post text",
   updated_at: ~N[2020-02-24 16:30:54],
   user: %Notatwitter.User{
     __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
     avatar: nil,
     followers: #Ecto.Association.NotLoaded<association :followers is not loaded>,
     follows: #Ecto.Association.NotLoaded<association :follows is not loaded>,
     id: 1,
     inserted_at: ~N[2019-11-10 14:53:17],
     posts: #Ecto.Association.NotLoaded<association :posts is not loaded>,
     updated_at: ~N[2019-11-10 14:53:17],
     username: "test"
   },
   user_id: 1
 }}
#+end_example

#+BEGIN_SRC elixir :script mix :session new-session-1
alias Notatwitter.User.Post.Reply.Manager
{:ok, reply} = Manager.create(user.id, post.id, %{"text" => "reply text"})
#+END_SRC

#+RESULTS:
#+begin_example
[32m[debug] QUERY OK db=64.4ms queue=2.1ms
INSERT INTO "user_post_replies" ("post_id","text","user_id","inserted_at","updated_at") VALUES ($1,$2,$3,$4,$5) RETURNING "id" [5, "reply text", 1, ~N[2020-02-24 16:32:03], ~N[2020-02-24 16:32:03]] 
[0m [36m[debug] QUERY OK source="users" db=3.0ms queue=0.1ms
SELECT u0."id", u0."username", u0."avatar", u0."inserted_at", u0."updated_at", u0."id" FROM "users" AS u0 WHERE (u0."id" = $1) [1]
[0m {:ok,
 %Notatwitter.User.Post.Reply{
   __meta__: #Ecto.Schema.Metadata<:loaded, "user_post_replies">,
   id: 6,
   inserted_at: ~N[2020-02-24 16:32:03],
   post: #Ecto.Association.NotLoaded<association :post is not loaded>,
   post_id: 5,
   text: "reply text",
   updated_at: ~N[2020-02-24 16:32:03],
   user: %Notatwitter.User{
     __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
     avatar: nil,
     followers: #Ecto.Association.NotLoaded<association :followers is not loaded>,
     follows: #Ecto.Association.NotLoaded<association :follows is not loaded>,
     id: 1,
     inserted_at: ~N[2019-11-10 14:53:17],
     posts: #Ecto.Association.NotLoaded<association :posts is not loaded>,
     updated_at: ~N[2019-11-10 14:53:17],
     username: "test"
   },
   user_id: 1
 }}
#+end_example

#+BEGIN_SRC elixir :script mix :session new-session-1
{:ok, updated_reply} = Manager.update(reply, %{"text" => "new reply text"})
#+END_SRC

#+RESULTS:
#+begin_example
[33m[debug] QUERY OK db=38.0ms queue=2.5ms
UPDATE "user_post_replies" SET "text" = $1, "updated_at" = $2 WHERE "id" = $3 ["new reply text", ~N[2020-02-24 16:32:50], 6]
[0m {:ok,
 %Notatwitter.User.Post.Reply{
   __meta__: #Ecto.Schema.Metadata<:loaded, "user_post_replies">,
   id: 6,
   inserted_at: ~N[2020-02-24 16:32:03],
   post: #Ecto.Association.NotLoaded<association :post is not loaded>,
   post_id: 5,
   text: "new reply text",
   updated_at: ~N[2020-02-24 16:32:50],
   user: %Notatwitter.User{
     __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
     avatar: nil,
     followers: #Ecto.Association.NotLoaded<association :followers is not loaded>,
     follows: #Ecto.Association.NotLoaded<association :follows is not loaded>,
     id: 1,
     inserted_at: ~N[2019-11-10 14:53:17],
     posts: #Ecto.Association.NotLoaded<association :posts is not loaded>,
     updated_at: ~N[2019-11-10 14:53:17],
     username: "test"
   },
   user_id: 1
 }}
#+end_example

#+BEGIN_SRC elixir :script mix :session new-session-1
Manager.list(post.id)
#+END_SRC

#+RESULTS:
#+begin_example
[36m[debug] QUERY OK source="user_post_replies" db=1.1ms queue=1.3ms
SELECT u0."id", u0."user_id", u0."post_id", u0."text", u0."inserted_at", u0."updated_at" FROM "user_post_replies" AS u0 WHERE (u0."post_id" = $1) [5]
[0m [36m[debug] QUERY OK source="users" db=0.7ms queue=0.1ms
SELECT u0."id", u0."username", u0."avatar", u0."inserted_at", u0."updated_at", u0."id" FROM "users" AS u0 WHERE (u0."id" = $1) [1]
[0m [
  %Notatwitter.User.Post.Reply{
    __meta__: #Ecto.Schema.Metadata<:loaded, "user_post_replies">,
    id: 6,
    inserted_at: ~N[2020-02-24 16:32:03],
    post: #Ecto.Association.NotLoaded<association :post is not loaded>,
    post_id: 5,
    text: "new reply text",
    updated_at: ~N[2020-02-24 16:32:50],
    user: %Notatwitter.User{
      __meta__: #Ecto.Schema.Metadata<:loaded, "users">,
      avatar: nil,
      followers: #Ecto.Association.NotLoaded<association :followers is not loaded>,
      follows: #Ecto.Association.NotLoaded<association :follows is not loaded>,
      id: 1,
      inserted_at: ~N[2019-11-10 14:53:17],
      posts: #Ecto.Association.NotLoaded<association :posts is not loaded>,
      updated_at: ~N[2019-11-10 14:53:17],
      username: "test"
    },
    user_id: 1
  }
]
#+end_example

*** –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –Ω–∞—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.

#+BEGIN_SRC diff :file-a "a/lib/notatwitter/users.ex" :file-b "b/lib/notatwitter/users.ex"
@@ -3,6 +3,7 @@ defmodule Notatwitter.Users do
 
   alias Notatwitter.{Auth, User}
   alias Notatwitter.User.Post
+  alias Notatwitter.User.Post.Reply
 
   defdelegate list_users(), to: User.Manager, as: :list
   defdelegate find_user(id), to: User.Manager, as: :find
@@ -13,4 +14,13 @@ defmodule Notatwitter.Users do
   defdelegate find_post(post_id), to: Post.Manager, as: :find
   defdelegate create_post(user_id, attrs), to: Post.Manager, as: :create
   defdelegate update_post(post_id, attrs), to: Post.Manager, as: :update
+
+  defdelegate list_replies(post_id), to: Reply.Manager, as: :list
+  defdelegate find_reply(reply_id), to: Reply.Manager, as: :find
+
+  defdelegate create_reply(user_id, post_id, attrs),
+    to: Reply.Manager,
+    as: :create
+
+  defdelegate update_reply(reply_id, attrs), to: Reply.Manager, as: :update
 end

#+END_SRC

*** –†–æ—É—Ç–µ—Ä

–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏–º —Ä–µ—Å—É—Ä—Å—ã –≤ —Ä–æ—É—Ç–µ—Ä. –û–Ω–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç, –∫–∞–∫–∏–µ –º–æ–¥—É–ª–∏
–¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—É—Ç–∏ –∏ –º–µ—Ç–æ–¥–∞.

#+BEGIN_SRC diff :file-a "a/lib/notatwitter_web/router.ex" :file-b "b/lib/notatwitter_web/router.ex"
@@ -20,7 +20,11 @@ defmodule NotatwitterWeb.Router do
       get "/posts", PostController, :index
     end
 
-    resources "/posts", PostController, only: [:create, :update]
+    resources "/posts", PostController, only: [:create, :update] do
+      resources "/replies", ReplyController, only: [:index, :create]
+    end
+
+    resources "/replies", ReplyController, only: [:update]
   end
 
   scope "/auth", NotatwitterWeb.Auth do

#+END_SRC

*** –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä

–°–æ–∑–¥–∞–¥–∏–º —Ñ–∞–π–ª –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞. –ï–≥–æ –∏–º—è –¥–æ–ª–∂–Ω–æ –æ–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ Controller.

#+BEGIN_SRC diff :file-a "a/lib/notatwitter_web/controllers/reply_controller.ex" :file-b "b/lib/notatwitter_web/controllers/reply_controller.ex"
@@ -0,0 +1,3 @@
+defmodule NotatwitterWeb.ReplyController do
+  @moduledoc false
+end

#+END_SRC

–û–ø—Ä–µ–¥–µ–ª–∏–º –¥–µ–π—Å—Ç–≤–∏—è. –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–µ –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ -- `conn`
–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏, –∞ –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–π
–Ω–∞–º –ø–æ–∫–∞ –Ω–µ –≤–∞–∂–µ–Ω -- –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (json body,
form-data, query –∏ –≤–æ—Ç —ç—Ç–æ –≤—Å—ë).

#+BEGIN_SRC diff :file-a "a/lib/notatwitter_web/controllers/reply_controller.ex" :file-b "b/lib/notatwitter_web/controllers/reply_controller.ex"
@@ -1,3 +1,14 @@
 defmodule NotatwitterWeb.ReplyController do
   @moduledoc false
+
+  use NotatwitterWeb, :controller
+
+  def index(conn, _) do
+  end
+
+  def create(conn, _) do
+  end
+
+  def update(conn, _) do
+  end
 end

#+END_SRC

–†–µ—Å—É—Ä—Å—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –Ω–∞–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–∂–µ –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤–æ –≤—Ç–æ—Ä–æ–π
–∞—Ä–≥—É–º–µ–Ω—Ç. –ú—ã –∏–∑–≤–ª–µ—á—ë–º –∏—Ö –ø—Ä—è–º–æ –æ—Ç—Ç—É–¥–∞.

#+BEGIN_SRC diff :file-a "a/lib/notatwitter_web/controllers/reply_controller.ex" :file-b "b/lib/notatwitter_web/controllers/reply_controller.ex"
@@ -3,12 +3,12 @@ defmodule NotatwitterWeb.ReplyController do
 
   use NotatwitterWeb, :controller
 
-  def index(conn, _) do
+  def index(conn, %{"post_id" => post_id}) do
   end
 
-  def create(conn, _) do
+  def create(conn, %{"post_id" => post_id} = params) do
   end
 
-  def update(conn, _) do
+  def update(conn, %{"id" => id} = params) do
   end
 end

#+END_SRC

–í –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ –º—ã –±—É–¥–µ–º –≤—ã–∑—ã–≤–∞—Ç—å –Ω–∞—à—É –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É, –∏, –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã–ª–æ
–∑–∞–º–µ—Ç–∏—Ç—å, —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ id –ø–æ—Å—Ç–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω
—Ä–µ–ø–ª–∞–π, –Ω–æ –∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ–≥–æ —Å–¥–µ–ª–∞–≤—à–µ–≥–æ. –î–ª—è –µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –º—ã
–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Guardian, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞
–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.

#+BEGIN_SRC diff :file-a "a/lib/notatwitter_web/controllers/reply_controller.ex" :file-b "b/lib/notatwitter_web/controllers/reply_controller.ex"
@@ -7,6 +7,7 @@ defmodule NotatwitterWeb.ReplyController do
   end
 
   def create(conn, %{"post_id" => post_id} = params) do
+    %{id: user_id} = Guardian.Plug.current_resource(conn)
   end
 
   def update(conn, %{"id" => id} = params) do

#+END_SRC

–¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É –Ω–∞—Å –µ—Å—Ç—å, –º—ã –º–æ–∂–µ–º
–ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –≤—ã–∑–æ–≤—É —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—ë–º
–≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤—å—é—à–∫–∏.

- [ ] –ù–µ–±–æ–ª—å—à–æ–π –∏–Ω—Ç—Ä–æ–¥–∞–∫—à–æ–Ω –≤ with

#+BEGIN_SRC diff :file-a "a/lib/notatwitter_web/controllers/reply_controller.ex" :file-b "b/lib/notatwitter_web/controllers/reply_controller.ex"
@@ -3,13 +3,27 @@ defmodule NotatwitterWeb.ReplyController do
 
   use NotatwitterWeb, :controller
 
+  alias Notatwitter.Users
+
   def index(conn, %{"post_id" => post_id}) do
+    replies = Users.list_replies(post_id)
+    render(conn, "index.json", replies: replies)
   end
 
   def create(conn, %{"post_id" => post_id} = params) do
     %{id: user_id} = Guardian.Plug.current_resource(conn)
+
+    with {:ok, reply} <- Users.create_reply(user_id, post_id, params) do
+      conn
+      |> put_status(:created)
+      |> render("created.json", reply: reply)
+    end
   end
 
   def update(conn, %{"id" => id} = params) do
+    with {:ok, reply} <- Users.find_reply(id),
+         {:ok, reply} <- Users.update_reply(reply, params) do
+      render(conn, "updated.json", reply: reply)
+    end
   end
 end

#+END_SRC

–ö–∞–∫ –º—ã –º–æ–∂–µ–º —É–≤–∏–¥–µ—Ç—å, –º—ã –Ω–∏–∫–∞–∫ –Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
-- –∞ –≤–µ–¥—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç —Å–æ–≤–µ—Ä—à–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä
—Ä–µ–ø–ª–∞—è. –ß—Ç–æ–±—ã —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É
Bodyguard. –ù–∞–º –Ω–∞–¥–æ –ø–µ—Ä–µ–¥–∞—Ç—å –º–æ–¥—É–ª—å, –≥–¥–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø—Ä–∞–≤–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ
–¥–µ–π—Å—Ç–≤–∏—è, —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–∞–º –æ–±—ä–µ–∫—Ç, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º —Å–æ–≤–µ—Ä—à–∞–µ—Ç—Å—è
–¥–µ–π—Å—Ç–≤–∏–µ.

#+BEGIN_SRC diff :file-a "a/lib/notatwitter_web/controllers/reply_controller.ex" :file-b "b/lib/notatwitter_web/controllers/reply_controller.ex"
@@ -3,6 +3,7 @@ defmodule NotatwitterWeb.ReplyController do
 
   use NotatwitterWeb, :controller
 
+  alias Notatwitter.User.AccessPolicy
   alias Notatwitter.Users
 
   def index(conn, %{"post_id" => post_id}) do
@@ -21,7 +22,11 @@ defmodule NotatwitterWeb.ReplyController do
   end
 
   def update(conn, %{"id" => id} = params) do
+    current_user = Guardian.Plug.current_resource(conn)
+
     with {:ok, reply} <- Users.find_reply(id),
+         :ok <-
+           Bodyguard.permit(AccessPolicy, :update_reply, current_user, reply),
          {:ok, reply} <- Users.update_reply(reply, params) do
       render(conn, "updated.json", reply: reply)
     end

#+END_SRC

–¢–µ–ø–µ—Ä—å –Ω–∞–¥–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –º–æ–¥—É–ª—è —Å –ø—Ä–∞–≤–∞–º–∏ –∏ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞
–¥–ª—è –Ω–∞—à–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.

#+BEGIN_SRC diff :file-a "a/lib/notatwitter/user/access_policy.ex" :file-b "b/lib/notatwitter/user/access_policy.ex"
@@ -18,6 +18,11 @@ defmodule Notatwitter.User.AccessPolicy do
     :ok
   end
 
+  @impl true
+  def authorize(:update_reply, %{id: id}, %{user_id: id}) do
+    :ok
+  end
+
   @impl true
   def authorize(_, _, _) do
     :error

#+END_SRC

–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É %Plug.Conn{},
–Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ–π—á–∞—Å –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç error-—Ç—É–ø–ª –Ω–∞ –æ—à–∏–±–∫–µ. –≠—Ç–æ
—Å–¥–µ–ª–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–µ–π—Å—ã –∏ –Ω–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å
—Å–æ—Ç–Ω–∏ —Ä–∞–∑ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫. –ú—ã –º–æ–∂–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å fallback controller,
–∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω—ã–µ –Ω–µ-conn –∑–Ω–∞—á–µ–Ω–∏—è.

#+BEGIN_SRC diff :file-a "a/lib/notatwitter_web/controllers/reply_controller.ex" :file-b "b/lib/notatwitter_web/controllers/reply_controller.ex"
@@ -6,6 +6,8 @@ defmodule NotatwitterWeb.ReplyController do
   alias Notatwitter.User.AccessPolicy
   alias Notatwitter.Users
 
+  action_fallback NotatwitterWeb.ErrorController
+
   def index(conn, %{"post_id" => post_id}) do
     replies = Users.list_replies(post_id)
     render(conn, "index.json", replies: replies)

#+END_SRC

–ù–∞ —ç—Ç–æ–º —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º–∏ –≤—Å—ë, –∏ –º—ã –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫–æ –≤—å—é.

*** –í—å—é

–ö–∞–∫ –∏ –≤–æ –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–ª—É—á–∞—è—Ö, –º—ã —Å–æ–∑–¥–∞—ë–º –º–æ–¥—É–ª—å.

#+BEGIN_SRC diff :file-a "a/lib/notatwitter_web/views/reply_view.ex" :file-b "b/lib/notatwitter_web/views/reply_view.ex"
@@ -0,0 +1,3 @@
+defmodule NotatwitterWeb.ReplyView do
+  @moduledoc false
+end

#+END_SRC

–î–µ–π—Å—Ç–≤–∏—è –≤–æ –≤—å—é –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω-–º–∞—Ç—á–∏–Ω–≥–æ–º –Ω–∞ –ø–µ—Ä–≤–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–µ
—Ñ—É–Ω–∫—Ü–∏–∏ `render/2`. –ú—ã –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π, –∞ —Ç–∞–∫ –∂–µ
–æ–±—â–∏–π `render/2`, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å —Ä–µ–ø–ª–∞–π.

#+BEGIN_SRC diff :file-a "a/lib/notatwitter_web/views/reply_view.ex" :file-b "b/lib/notatwitter_web/views/reply_view.ex"
@@ -1,3 +1,17 @@
 defmodule NotatwitterWeb.ReplyView do
   @moduledoc false
+
+  use NotatwitterWeb, :view
+
+  def render("index.json", %{replies: replies}) do
+  end
+
+  def render("created.json", %{reply: reply}) do
+  end
+
+  def render("updated.json", %{reply: reply}) do
+  end
+
+  def render("reply.json", %{reply: %{user: user} = reply}) do
+  end
 end

#+END_SRC

–°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–µ–º –æ–±—â—É—é –≤—å—é—Ö—É. –í –Ω–µ–π –º—ã –±—É–¥–µ–º –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –º–∞–ø—É —Å –ø–æ–ª—è–º–∏
-- –æ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ç—Å—è –≤ json –Ω–∞—à–∏–º —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–º.

#+BEGIN_SRC diff :file-a "a/lib/notatwitter_web/views/reply_view.ex" :file-b "b/lib/notatwitter_web/views/reply_view.ex"
@@ -13,5 +13,13 @@ defmodule NotatwitterWeb.ReplyView do
   end
 
   def render("reply.json", %{reply: %{user: user} = reply}) do
+    %{
+      id: reply.id,
+      user_id: user.id,
+      username: user.username,
+      avatar: image_url({user.avatar, user}, :big),
+      created_at: datetime_to_integer(reply.inserted_at),
+      text: reply.text
+    }
   end
 end

#+END_SRC

–¢–µ–ø–µ—Ä—å –Ω–∞–º –Ω–∞–¥–æ —Ç–æ–ª—å–∫–æ –≤—ã–∑–≤–∞—Ç—å —ç—Ç—É –≤—å—é—Ö—É –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤—å—é—Ö–∞—Ö –Ω–∞ –∫–∞–∂–¥–æ–µ
–¥–µ–π—Å—Ç–≤–∏–µ.

–î–ª—è "created.json" –∏ "updated.json" –º—ã –±—É–¥–µ–º –≤—ã–∑—ã–≤–∞—Ç—å –µ—ë —á–µ—Ä–µ–∑
`render_one/4` -- –æ–Ω –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –≤—å—é—Ö—É –∏ –ø–µ—Ä–µ–¥–∞—ë—Ç —Ç—É–¥–∞
–ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç.

#+BEGIN_SRC diff :file-a "a/lib/notatwitter_web/views/reply_view.ex" :file-b "b/lib/notatwitter_web/views/reply_view.ex"
@@ -7,9 +7,11 @@ defmodule NotatwitterWeb.ReplyView do
   end
 
   def render("created.json", %{reply: reply}) do
+    render_one(reply, __MODULE__, "reply.json")
   end
 
   def render("updated.json", %{reply: reply}) do
+    render_one(reply, __MODULE__, "reply.json")
   end
 
   def render("reply.json", %{reply: %{user: user} = reply}) do

#+END_SRC

–í —Å–ª—É—á–∞–µ —Å "index.json" –º—ã –∏–º–µ–µ–º –¥–µ–ª–æ –Ω–µ —Å –æ–¥–Ω–∏–º —Ä–µ–ø–ª–∞–µ–º, –∞ —Å–æ
—Å–ø–∏—Å–∫–æ–º. –° –Ω–∏–º–∏ –Ω–∞–º –ø–æ–º–æ–∂–µ—Ç `render_many/4`.

#+BEGIN_SRC diff :file-a "a/lib/notatwitter_web/views/reply_view.ex" :file-b "b/lib/notatwitter_web/views/reply_view.ex"
@@ -4,6 +4,7 @@ defmodule NotatwitterWeb.ReplyView do
   use NotatwitterWeb, :view
 
   def render("index.json", %{replies: replies}) do
+    render_many(replies, __MODULE__, "reply.json")
   end
 
   def render("created.json", %{reply: reply}) do

#+END_SRC

–ù–∞ —ç—Ç–æ–º —Å–æ –≤—å—é—Ö–∞–º–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏.

*** –ó–∞–ø—É—Å–∫–∞–µ–º

#+BEGIN_SRC sh :dir "." :results output :exports both :eval yes
mix phx.server
#+END_SRC

#+BEGIN_SRC restclient
POST http://localhost:4000/auth/register
Accept: application/json
Content-Type: application/json

{"username":"username","password":"password"}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "id": 6,
  "username": "username"
}
// POST http://localhost:4000/auth/register
// HTTP/1.1 201 Created
// cache-control: max-age=0, private, must-revalidate
// content-length: 30
// content-type: application/json; charset=utf-8
// cross-origin-window-policy: deny
// date: Mon, 24 Feb 2020 16:11:15 GMT
// server: Cowboy
// x-content-type-options: nosniff
// x-download-options: noopen
// x-frame-options: SAMEORIGIN
// x-permitted-cross-domain-policies: none
// x-request-id: FfZijCQGM5eG9rgAAAEE
// x-xss-protection: 1; mode=block
// Request duration: 2.221744s
#+END_SRC

#+BEGIN_SRC restclient
POST http://localhost:4000/auth/login
Accept: application/json
Content-Type: application/json

{"username":"username","password":"password"}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "id": 6,
  "token": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJub3RhdHdpdHRlciIsImV4cCI6MTU4NDk3OTk1NywiaWF0IjoxNTgyNTYwNzU3LCJpc3MiOiJub3RhdHdpdHRlciIsImp0aSI6IjAwMjBkZjdhLTI4MzgtNDlkYy05OTQzLWY5OGY0NWE4ZmVlNCIsIm5iZiI6MTU4MjU2MDc1Niwic3ViIjoiNiIsInR5cCI6ImFjY2VzcyJ9.hKEShyjLV2VVMdxE-hLZ3B61GnkqNtzjyjDFtb-0VkIP8xcG2u-rOtKRnvyCSRdHrzIzlf5aBQUQpDFnBMfehw",
  "username": "username"
}
// POST http://localhost:4000/auth/login
// HTTP/1.1 200 OK
// cache-control: max-age=0, private, must-revalidate
// content-length: 381
// content-type: application/json; charset=utf-8
// cross-origin-window-policy: deny
// date: Mon, 24 Feb 2020 16:12:37 GMT
// server: Cowboy
// x-content-type-options: nosniff
// x-download-options: noopen
// x-frame-options: SAMEORIGIN
// x-permitted-cross-domain-policies: none
// x-request-id: FfZin3qbOBUYl5YAAAEk
// x-xss-protection: 1; mode=block
// set-cookie: sessionToken=eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJub3RhdHdpdHRlciIsImV4cCI6MTU4NDk3OTk1NywiaWF0IjoxNTgyNTYwNzU3LCJpc3MiOiJub3RhdHdpdHRlciIsImp0aSI6IjAwMjBkZjdhLTI4MzgtNDlkYy05OTQzLWY5OGY0NWE4ZmVlNCIsIm5iZiI6MTU4MjU2MDc1Niwic3ViIjoiNiIsInR5cCI6ImFjY2VzcyJ9.hKEShyjLV2VVMdxE-hLZ3B61GnkqNtzjyjDFtb-0VkIP8xcG2u-rOtKRnvyCSRdHrzIzlf5aBQUQpDFnBMfehw; Path=/; Max-Age=86400
// Request duration: 1.846802s
#+END_SRC

#+BEGIN_SRC restclient
POST http://localhost:4000/posts
Accept: application/json
Content-Type: application/json

{"text":"new post!"}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "avatar": null,
  "createdAt": 1582560864,
  "id": 3,
  "text": "new post!",
  "userId": 6,
  "username": "username"
}
// POST http://localhost:4000/posts
// HTTP/1.1 201 Created
// cache-control: max-age=0, private, must-revalidate
// content-length: 97
// content-type: application/json; charset=utf-8
// cross-origin-window-policy: deny
// date: Mon, 24 Feb 2020 16:14:24 GMT
// server: Cowboy
// x-content-type-options: nosniff
// x-download-options: noopen
// x-frame-options: SAMEORIGIN
// x-permitted-cross-domain-policies: none
// x-request-id: FfZiuJ0CMGRgKm4AAAGE
// x-xss-protection: 1; mode=block
// set-cookie: sessionToken=eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJub3RhdHdpdHRlciIsImV4cCI6MTU4NDk3OTk1NywiaWF0IjoxNTgyNTYwNzU3LCJpc3MiOiJub3RhdHdpdHRlciIsImp0aSI6IjAwMjBkZjdhLTI4MzgtNDlkYy05OTQzLWY5OGY0NWE4ZmVlNCIsIm5iZiI6MTU4MjU2MDc1Niwic3ViIjoiNiIsInR5cCI6ImFjY2VzcyJ9.hKEShyjLV2VVMdxE-hLZ3B61GnkqNtzjyjDFtb-0VkIP8xcG2u-rOtKRnvyCSRdHrzIzlf5aBQUQpDFnBMfehw; Path=/; Max-Age=86400
// Request duration: 0.319683s
#+END_SRC

#+BEGIN_SRC restclient
POST http://localhost:4000/posts/3/replies
Accept: application/json
Content-Type: application/json

{"text":"reply!"}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "avatar": null,
  "createdAt": 1582560956,
  "id": 5,
  "text": "reply!",
  "userId": 6,
  "username": "username"
}
// POST http://localhost:4000/posts/3/replies
// HTTP/1.1 201 Created
// cache-control: max-age=0, private, must-revalidate
// content-length: 94
// content-type: application/json; charset=utf-8
// cross-origin-window-policy: deny
// date: Mon, 24 Feb 2020 16:15:56 GMT
// server: Cowboy
// x-content-type-options: nosniff
// x-download-options: noopen
// x-frame-options: SAMEORIGIN
// x-permitted-cross-domain-policies: none
// x-request-id: FfZizifZc9S8BfwAAAHk
// x-xss-protection: 1; mode=block
// set-cookie: sessionToken=eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJub3RhdHdpdHRlciIsImV4cCI6MTU4NDk3OTk1NywiaWF0IjoxNTgyNTYwNzU3LCJpc3MiOiJub3RhdHdpdHRlciIsImp0aSI6IjAwMjBkZjdhLTI4MzgtNDlkYy05OTQzLWY5OGY0NWE4ZmVlNCIsIm5iZiI6MTU4MjU2MDc1Niwic3ViIjoiNiIsInR5cCI6ImFjY2VzcyJ9.hKEShyjLV2VVMdxE-hLZ3B61GnkqNtzjyjDFtb-0VkIP8xcG2u-rOtKRnvyCSRdHrzIzlf5aBQUQpDFnBMfehw; Path=/; Max-Age=86400
// Request duration: 0.169850s
#+END_SRC

#+BEGIN_SRC restclient
GET http://localhost:4000/posts/3/replies
Accept: application/json
Content-Type: application/json
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
[
  {
    "avatar": null,
    "createdAt": 1582560956,
    "id": 5,
    "text": "reply!",
    "userId": 6,
    "username": "username"
  }
]
// GET http://localhost:4000/posts/3/replies
// HTTP/1.1 200 OK
// cache-control: max-age=0, private, must-revalidate
// content-length: 96
// content-type: application/json; charset=utf-8
// cross-origin-window-policy: deny
// date: Mon, 24 Feb 2020 16:17:01 GMT
// server: Cowboy
// x-content-type-options: nosniff
// x-download-options: noopen
// x-frame-options: SAMEORIGIN
// x-permitted-cross-domain-policies: none
// x-request-id: FfZi3Wk3yE2b6sgAAAMB
// x-xss-protection: 1; mode=block
// set-cookie: sessionToken=eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJub3RhdHdpdHRlciIsImV4cCI6MTU4NDk3OTk1NywiaWF0IjoxNTgyNTYwNzU3LCJpc3MiOiJub3RhdHdpdHRlciIsImp0aSI6IjAwMjBkZjdhLTI4MzgtNDlkYy05OTQzLWY5OGY0NWE4ZmVlNCIsIm5iZiI6MTU4MjU2MDc1Niwic3ViIjoiNiIsInR5cCI6ImFjY2VzcyJ9.hKEShyjLV2VVMdxE-hLZ3B61GnkqNtzjyjDFtb-0VkIP8xcG2u-rOtKRnvyCSRdHrzIzlf5aBQUQpDFnBMfehw; Path=/; Max-Age=86400
// Request duration: 0.153013s
#+END_SRC

–î–æ–±–∞–≤–∏–º –ø—Ä–∏–ª–æ–∞–¥—ã.

#+BEGIN_SRC diff :file-a "a/lib/notatwitter/user/post/reply/manager.ex" :file-b "b/lib/notatwitter/user/post/reply/manager.ex"
@@ -15,6 +15,12 @@ defmodule Notatwitter.User.Post.Reply.Manager do
   end
 
   def create(user_id, post_id, attrs) do
+    with {:ok, reply} <- do_create(user_id, post_id, attrs) do
+      {:ok, Repo.preload(reply, [:user])}
+    end
+  end
+
+  defp do_create(user_id, post_id, attrs) do
     attrs = Map.merge(attrs, %{"user_id" => user_id, "post_id" => post_id})
 
     %Reply{}
@@ -26,7 +32,13 @@ defmodule Notatwitter.User.Post.Reply.Manager do
     |> Repo.insert()
   end
 
-  def update(reply, attrs) do
+  def update(%Reply{} = reply, attrs) do
+    with {:ok, reply} <- do_update(reply, attrs) do
+      {:ok, Repo.preload(reply, [:user])}
+    end
+  end
+
+  defp do_update(reply, attrs) do
     reply
     |> Changeset.cast(attrs, [:text])
     |> Changeset.validate_length(:text, max: 140, count: :bytes)

#+END_SRC

–¢–µ–ø–µ—Ä—å –≤—Å—ë –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å.
